name: Self-hosted Runner Workflow

on:
  workflow_dispatch: {}
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
      - closed

jobs:
  setup:
    runs-on: self-hosted
    env:
      DOTCOVER_VERSION: 2023.2.2
      MINGIT_URL: https://github.com/git-for-windows/git/releases/download/v2.42.0.windows.2/MinGit-2.42.0.2-64-bit.zip
    steps:
      - name: Check portable Git Windows
        if: runner.os == 'Windows'
        run: |
          $gitPath = "..\PortableGit\cmd\git.exe"
  
          if (Test-Path -Path $gitPath -PathType Leaf) {
            Write-Host "Portable Git exists at the specified location."
          } else {
            Write-Host "Portable Git does not exist at the specified location, downloading it."
            echo "Downloading Portable Git from $url"
            $outputPath = "..\PortableGit.zip"
            $extractPath = "..\PortableGit"
            
            Invoke-WebRequest -Uri $env:MINGIT_URL -OutFile $outputPath -Verbose
            Expand-Archive -Path $outputPath -DestinationPath $extractPath -Force -Verbose
            Remove-Item -Path $outputPath -Force -Verbose
          }
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Machine) + "..\PortableGit\cmd\"
      - name: Check Git Linux and macOS
        if: runner.os != 'Windows'
        run: |
            # check if git is installed and if not install it
              if ! command -v git &> /dev/null
              then
                echo "Git is not installed, installing it."
                sudo apt-get update
                sudo apt-get install git
              fi
      - name: Check dotCover Windows
        if: runner.os == 'Windows'
        run: |
          $exePath = "..\dotCover\dotCover.exe"
  
          if (Test-Path -Path $exePath -PathType Leaf) {
            Write-Host "dotCover.exe exists at the specified location."
          } else {
            Write-Host "dotCover.exe does not exist at the specified location, downloading it."
            $url = "https://download.jetbrains.com/resharper/dotUltimate.$env:DOTCOVER_VERSION/JetBrains.dotCover.CommandLineTools.windows-x64.$env:DOTCOVER_VERSION.zip"
            echo "Downloading dotCover from $url"
            $outputPath = "..\dotCover.zip"
            $extractPath = "..\dotCover"
            
            Invoke-WebRequest -Uri $url -OutFile $outputPath -Verbose
            Expand-Archive -Path $outputPath -DestinationPath $extractPath -Force -Verbose
            Remove-Item -Path $outputPath -Force -Verbose
          }
      - name: Check dotCover Linux and macOS
        if: runner.os != 'Windows'
        run: |
          if [ ! -e "../dotCover/dotCover.sh" ]; then
            echo "dotCover.sh does not exist at the specified location, downloading it."
          else
            echo "dotCover.sh exists at the specified location."
            exit 0
          fi
          
          if [[ $(uname -m) != "x86_64" ]]; then
            if [[ $RUNNER_OS == "Linux" ]]; then
              download_url="https://download.jetbrains.com/resharper/dotUltimate.$DOTCOVER_VERSION/JetBrains.dotCover.CommandLineTools.linux-arm64.$DOTCOVER_VERSION.tar.gz"
            else
              download_url="https://download.jetbrains.com/resharper/dotUltimate.$DOTCOVER_VERSION/JetBrains.dotCover.CommandLineTools.macos-arm64.$DOTCOVER_VERSION.tar.gz"
            fi
          else
            if [[ $RUNNER_OS == "Linux" ]]; then
              download_url="https://download.jetbrains.com/resharper/dotUltimate.$DOTCOVER_VERSION/JetBrains.dotCover.CommandLineTools.linux-x64.$DOTCOVER_VERSION.tar.gz"
            else
              download_url="https://download.jetbrains.com/resharper/dotUltimate.$DOTCOVER_VERSION/JetBrains.dotCover.CommandLineTools.macos-x64.$DOTCOVER_VERSION.tar.gz"
            fi
          fi
          echo "Downloading dotCover from $download_url"
          # Define the download and output paths
          output_path="../dotCover.tar.gz"
          extract_path="../dotCover"
          wget -O "$output_path" "$download_url"
          mkdir -p "$extract_path"
          tar -xzvf "$output_path" -C "$extract_path"
          rm "$output_path"
      - name: Check out code
        uses: actions/checkout@v2
      - name: Check if Unity is in PATH Linux
        if: runner.os != 'Windows'
        run: |
          UNITY_PATH=$(which unity)
  
          if [ -n "$UNITY_PATH" ]; then
            echo "Unity is installed and is located at: $UNITY_PATH"
          
            # Extract the Unity version from the executable path
            UNITY_VERSION=$(echo "$UNITY_PATH" | grep -oP '(\d{4}\.\d+\.\d+[a-z]+\d+)')
            
            # Read the Unity version from ProjectVersion.txt
            PROJECT_VERSION_FILE="./ProjectSettings/ProjectVersion.txt"
            PROJECT_VERSION=$(grep -oP 'm_EditorVersion: \K(\d{4}\.\d+\.\d+[a-z]+\d+)' "$PROJECT_VERSION_FILE")
            
            if [ "$PROJECT_VERSION" = "$UNITY_VERSION" ]; then
              echo "Unity versions match: ProjectVersion.txt version is $PROJECT_VERSION and Unity path version is $UNITY_VERSION."
            else
              echo "Unity versions do not match: ProjectVersion.txt version is $PROJECT_VERSION, but Unity path version is $UNITY_VERSION."
              exit 1
            fi
          else
            echo "Unity is not installed or not in the PATH."
            exit 1  # This line will stop the script with a failure status.
          fi
      - name: Check if Unity is in PATH Windows
        if: runner.os == 'Windows'
        run: |
          $UNITY_PATH = Get-Command -ErrorAction SilentlyContinue -Name 'unity.exe' | Select-Object -ExpandProperty Source
          if ($UNITY_PATH) {
            Write-Host "Unity is installed and is located at: $UNITY_PATH"
            # Compare the two versions
            $projectVersionFile = ".\ProjectSettings\ProjectVersion.txt"
            $projectVersion = Get-Content $projectVersionFile | Where-Object { $_ -match "m_EditorVersion:" } | ForEach-Object { $_ -replace "m_EditorVersion: ", "" }
            $pattern = "(\d{4}\.\d+\.\d+[a-z]+\d+)"
            $unityVersion = [regex]::Match($UNITY_PATH, $pattern).Groups[1].Value
            if ($projectVersion -eq $unityVersion) {
              Write-Host "Unity versions match: ProjectVersion.txt version is $projectVersion and Unity path version is $unityVersion."
            } else {
              Write-Host "Unity versions do not match: ProjectVersion.txt version is $projectVersion, but Unity path version is $unityVersion."
              exit 1
            }
          } else {
            Write-Host "Unity is not installed or not in the PATH."
            exit 1  # This line will stop the workflow with a failure status.
          }
      - name: Generate Project
        run: unity -batchmode -quit -projectPath . -logfile -
      - name: Create output directory 
        run: |
          mkdir -p "../CiOutput/$(git branch --show-current)/$(git rev-parse HEAD)"


  dotnetsetup:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: setup dotnet Windows
        if: runner.os == 'Windows'
        run: |
          $exePath = "..\dotnet\dotnet.exe"
          
          if(Test-Path -Path $exePath -PathType Leaf) {
            Write-Host "dotnet.exe exists at the specified location."
          } else {
            Write-Host "dotnet.exe does not exist at the specified location, downloading it."
            $url = "https://dot.net/v1/dotnet-install.ps1"
            $outputPath = "./dotnet-install.ps1"
            Invoke-WebRequest -Uri $url -OutFile $outputPath -Verbose
            ./dotnet-install.ps1 -Channel LTS -InstallDir ../dotnet
            ./dotnet-install.ps1 -Channel LTS -Runtime dotnet -InstallDir ../dotnet
          }
      - name: setup dotnet Linux
        if: runner.os != 'Windows'
        run: |
          if [ ! -e "../dotnet/dotnet.sh" ]; then
          then
              wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
              chmod +x dotnet-install.sh
              ./dotnet-install.sh --version latest
              ./dotnet-install.sh --version latest --runtime 'dotnet'
          fi

  sonarbegin:
    runs-on: self-hosted
    needs: dotnetsetup
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      DOTNET_ROOT: ../dotnet
    steps:
      - name: Sonar Begin
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          ../dotnet/dotnet tool install --tool-path ../dotnet/tools dotnet-sonarscanner
          ../dotnet/tools/dotnet-sonarscanner begin /o:$env:SONAR_ORGANIZATION /k:$env:SONAR_PROJECT_KEY /d:sonar.host.url=$env:SONAR_HOST_URL
      - name: Sonar Begin Linux
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ../dotnet/dotnet tool install --tool-path ../dotnet/tools dotnet-sonarscanner
          ../dotnet/tools/dotnet-sonarscanner begin /o:$SONAR_ORGANIZATION /k:$SONAR_PROJECT_KEY /d:sonar.host.url=$SONAR_HOST_URL

  analyze-roslyn:
    name: Roslynator Analyze
    runs-on: self-hosted
    env:
      DOTNET_ROOT: ../dotnet
    needs: dotnetsetup
    steps:
      - name: run roslynator analyze Windows
        if: runner.os == 'Windows'
        continue-on-error: true
        run: |
          ../dotnet/dotnet.exe tool install --tool-path ../dotnet/tools roslynator.dotnet.cli
          $slnFile = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
          if ($slnFile -eq $null) {
              Write-Host "No .sln file found in the directory and its subdirectories."
          } else {
            ../dotnet/tools/roslynator.exe analyze $slnFile -o "..\CiOutput\$(git branch --show-current)\$(git rev-parse HEAD)\analyze.xml" -v d --report-suppressed-diagnostics -a ./Packages
          }
      - name: run roslynator analyze Linux
        if: runner.os != 'Windows'
        continue-on-error: true
        run: |
          ../dotnet/dotnet tool install --tool-path ../dotnet/tools roslynator.dotnet.cli
          slnFile=$(find . -type f -name "*.sln" | head -n 1)
  
          if [ -z "$slnFile" ]; then
            echo "No .sln file found in the directory and its subdirectories."
          else
            # Run roslynator analyze on the found .sln file
            outputDir="../CiOutput/$(git branch --show-current)/$(git rev-parse HEAD)"
            outputPath="$outputDir/analyze.xml"
          
            echo "Found .sln file: $slnFile"
            echo "Running roslynator analyze on $slnFile"
            
            mkdir -p "$outputDir"
            ../dotnet/tools/roslynator analyze "$slnFile" -o "$outputPath" -v d --report-suppressed-diagnostics -a ./Packages
          fi

  tests:
    runs-on: self-hosted
    needs: sonarbegin
    steps:
      - name: list
        run: dir


  sonarend:
    name: Sonar End
    runs-on: self-hosted
    needs: tests
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOTNET_ROOT: ../dotnet
    steps:
      - name: Sonar End Windows
        if: runner.os == 'Windows'
        run: |
          $slnFile = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1
          if ($slnFile -eq $null) {
              Write-Host "No .sln file found in the directory and its subdirectories."
          } else {
            ../dotnet/dotnet.exe msbuild $slnFile -t:Rebuild
          }
          ../dotnet/tools/dotnet-sonarscanner end /d:sonar.login=$env:SONAR_TOKEN
      - name: Sonar End Linux
        if: runner.os != 'Windows'
        run: |
          slnFile=$(find . -type f -name "*.sln" | head -n 1)
          
          if [ -z "$slnFile" ]; then
            echo "No .sln file found in the directory and its subdirectories."
          else
            # Run dotnet build on the found .sln file
            echo "Found .sln file: $slnFile"
            echo "Running dotnet build on $slnFile"
            ../dotnet/dotnet msbuild "$slnFile" -t:Rebuild
          fi
          ../dotnet/tools/dotnet-sonarscanner end

  commit:
    runs-on: self-hosted
    needs: [tests, sonarend]
    steps:
      - name: remove CiOutput if it exists Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $folderToRemove="./CiOutput"
          
          if (Test-Path $folderToRemove -PathType Container) {
            Remove-Item -Path $folderToRemove -Recurse -Force
          } else {
            Write-Host "Folder does not exist."
          }
      - name: remove CiOutput if it exists Linux
        if: runner.os != 'Windows'
        run: |
          folder_to_remove="./CiOutput"
  
          if [ -d "$folder_to_remove" ]; then
            rm -r "$folder_to_remove"
          else
            echo "Folder does not exist."
          fi
      - name: move output
        run: |
          git reset --hard
          mv ../CiOutput ./CiOutput
      - name: Push
        run: |
          git fetch origin CI
          $commitMessage="CI commit for $(git branch --show-current)/$(git rev-parse HEAD)"
          git checkout CI
          git add ./CiOutput
          git commit -m "$commitMessage"
          git push origin CI

  cleanup:
    runs-on: self-hosted
    needs: commit
    steps:
      - name: cleanup Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: Remove-Item * -Force -Recurse
      - name: cleanup Linux
        if: runner.os != 'Windows'
        run: rm -r -- !(.) .*
